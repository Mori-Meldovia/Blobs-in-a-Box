[gd_scene load_steps=13 format=4 uid="uid://5cj8wv2jgnxh"]

[ext_resource type="Texture2D" uid="uid://b5hg6xppil3xm" path="res://assets/tilemap/walls.png" id="2_fmjcu"]
[ext_resource type="Texture2D" uid="uid://ch157xsaqwque" path="res://assets/tilemap/Objects.png" id="3_fdq0e"]
[ext_resource type="Texture2D" uid="uid://77wd3ua4gyr7" path="res://assets/sprite/red.png" id="4_vbmrn"]
[ext_resource type="Shader" path="res://purple.gdshader" id="5_jd17v"]
[ext_resource type="Texture2D" uid="uid://4p756yqoh2c" path="res://assets/sprite/blue.png" id="6_prle1"]

[sub_resource type="GDScript" id="GDScript_8rc57"]
script/source = "extends Node

enum COLOR {
	BLUE = 1,
	RED,
	GRAY
}

enum OBJECTS {
	EMPTY = -1,
	FLAG,
	STAR,
	SKULL,
	BUTTON_GREEN,
	BUTTON_YELLOW,
	BUTTON_AQUA,
	GATE_GREEN_H_CLOSED,
	GATE_GREEN_H_OPEN,
	GATE_GREEN_V_CLOSED,
	GATE_GREEN_V_OPEN,
	GATE_YELLOW_H_CLOSED,
	GATE_YELLOW_H_OPEN,
	GATE_YELLOW_V_CLOSED,
	GATE_YELLOW_V_OPEN,
	GATE_AQUA_H_CLOSED,
	GATE_AQUA_H_OPEN,
	GATE_AQUA_V_CLOSED,
	GATE_AQUA_V_OPEN,
	BELT_RIGHT,
	BELT_DOWN,
	BELT_LEFT,
	BELT_UP
}

enum MOVABLES {
	PLAYER,
	PUSH
}

const GRID_SIZE := 64
const SPEED := 15
var SEARCH_SIZE := DisplayServer.screen_get_usable_rect().size / (Vector2i.ONE * GRID_SIZE)

var moves := 0

var movables : Array[Dictionary] = []
var flags : Array[Dictionary] = []
var stars := 0
var win := false
var defeat := false
@onready var win_label : Label = $Win
@onready var defeat_label : Label = $Defeat


# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	win_label.hide()
	defeat_label.hide()
	
	# Fetch and load nodes automatically
	for child in get_children():
		if child is not Sprite2D:
			continue
		
		var child_name := child.get_name()
		
		var type := MOVABLES.PUSH
		var color := COLOR.GRAY
		var shader_node = null
		
		if child_name.begins_with(\"Player\"):
			type = MOVABLES.PLAYER
		
		
		if child_name.ends_with(\"Red\"):
			color = COLOR.RED
		elif child_name.ends_with(\"Blue\"):
			color = COLOR.BLUE
			shader_node = get_node(child_name.replace(\"Blue\", \"Red\"))
		
		var obj := {
			\"node\": child,
			\"type\": type,
			\"color\": color,
			\"pos\": pos2coord(child.position),
			\"last_pos\": null,
			\"moves\": [pos2coord(child.position)],
			\"shader_node\": shader_node
		}
		movables.append(obj)
		
		child.scale = Vector2.ONE * 0.45
		child.position = coord2pos(obj.pos)
	
	for y in range(SEARCH_SIZE.y):
		for x in range(SEARCH_SIZE.x):
			var pos := Vector2i(x, y)
			var atlas : Vector2i = $Objects.get_cell_atlas_coords(pos)
			
			# Make a count of all flags and stars
			if atlas.x == 0:
				# is a flag
				if atlas.y == 0:
					# purple flag
					flags.append({
						\"pos\": pos,
						\"color\": COLOR.BLUE,
						\"reached\": false
					})
					flags.append({
						\"pos\": pos,
						\"color\": COLOR.RED,
						\"reached\": false
					})
				else:
					flags.append({
						\"pos\": pos,
						\"color\": atlas.y,
						\"reached\": false
					})
			if atlas.x == 1:
				# is a star
				if atlas.y == 0:
					# purple star
					stars += 2
				else:
					stars += 1
	print(win)
	print(defeat)
	

# Called every frame. 'delta' is the elapsed time since the previous frame.
var t := 1.
func _process(delta: float) -> void:
	var moved := false
	
	if t >= 1:
		# Store last position for interpolation
		for obj in movables:
			obj.last_pos = coord2pos(obj.pos)
		
		# Detect movement
		if (!win && !defeat):
			if Input.is_action_just_pressed(\"Up\"):
				for obj in movables:
					if obj.type == MOVABLES.PLAYER && can_move(Vector2i(obj.pos.x, obj.pos.y - 1), obj.color):
						obj.pos.y -= 1
						moved = true
			elif Input.is_action_just_pressed(\"Down\"):
				for obj in movables:
					if obj.type == MOVABLES.PLAYER && can_move(Vector2i(obj.pos.x, obj.pos.y + 1), obj.color):
						obj.pos.y += 1
						moved = true
			elif Input.is_action_just_pressed(\"Left\"):
				for obj in movables:
					if obj.type == MOVABLES.PLAYER && can_move(Vector2i(obj.pos.x - 1, obj.pos.y), obj.color):
						obj.pos.x -= 1
						moved = true
			elif Input.is_action_just_pressed(\"Right\"):
				for obj in movables:
					if obj.type == MOVABLES.PLAYER && can_move(Vector2i(obj.pos.x + 1, obj.pos.y), obj.color):
						obj.pos.x += 1
						moved = true
		
		# Check for belts
		for obj in movables:
			if moved && obj.pos != obj.moves[-1] && obj.type == MOVABLES.PLAYER:
				var object := check_object(obj.pos, obj.color)
				
				if object == OBJECTS.BELT_UP && can_move(Vector2i(obj.pos.x, obj.pos.y - 1), obj.color):
					obj.pos.y -= 1
				if object == OBJECTS.BELT_DOWN && can_move(Vector2i(obj.pos.x, obj.pos.y + 1), obj.color):
					obj.pos.y += 1
				if object == OBJECTS.BELT_LEFT && can_move(Vector2i(obj.pos.x - 1, obj.pos.y), obj.color):
					obj.pos.x -= 1
				if object == OBJECTS.BELT_RIGHT && can_move(Vector2i(obj.pos.x + 1, obj.pos.y), obj.color):
					obj.pos.x += 1
		
		# Undo
		if Input.is_action_just_pressed(\"Undo\") && moves > 0:
			for obj in movables:
				obj.moves.pop_back()
				obj.pos = obj.moves.back()
			t = 0
			moves -= 1
			returnPos()
			
			if (defeat):
				defeat_hide()
		
		if moved:
			t = 0
			moves += 1
			for obj in movables:
				obj.moves.append(obj.pos)
			returnPos()
		
	else:
		t = minf(t + delta * SPEED, 1)
		
		for obj in movables:
			# Update positions
			obj.node.position = obj.last_pos.lerp(coord2pos(obj.pos), t * t * (3 - 2 * t))
		
			# Shader
			if obj.shader_node:
				var offset : Vector2 = obj.node.position - obj.shader_node.position
				obj.node.material.set(\"shader_parameter/offset\", offset * 2)
	
	# Check for objects
	for obj in movables:
		if moved && obj.moves[-1] != obj.moves[-2]:
			var object := check_object(obj.pos, obj.color)
			
			# Star
			if object == OBJECTS.STAR && obj.type == MOVABLES.PLAYER:
				destroy_object(obj.pos, obj.color)
				stars -= 1
			
			# Skull
			elif object == OBJECTS.SKULL && obj.type == MOVABLES.PLAYER:
				defeat_show(obj)
			
			# Buttons
			elif object == OBJECTS.BUTTON_GREEN:
				for y in range(SEARCH_SIZE.y):
					for x in range(SEARCH_SIZE.x):
						var pos := Vector2i(x, y)
						var atlas : Vector2i = $Objects.get_cell_atlas_coords(pos)
						if atlas.x == OBJECTS.GATE_GREEN_H_CLOSED || atlas.x == OBJECTS.GATE_GREEN_V_CLOSED:
							$Objects.set_cell(pos, 1, atlas + Vector2i.RIGHT)
						elif atlas.x == OBJECTS.GATE_GREEN_H_OPEN || atlas.x == OBJECTS.GATE_GREEN_V_OPEN:
							$Objects.set_cell(pos, 1, atlas + Vector2i.LEFT)
			elif object == OBJECTS.BUTTON_YELLOW:
				for y in range(SEARCH_SIZE.y):
					for x in range(SEARCH_SIZE.x):
						var pos := Vector2i(x, y)
						var atlas : Vector2i = $Objects.get_cell_atlas_coords(pos)
						if atlas.x == OBJECTS.GATE_YELLOW_H_CLOSED || atlas.x == OBJECTS.GATE_YELLOW_V_CLOSED:
							$Objects.set_cell(pos, 1, atlas + Vector2i.RIGHT)
						elif atlas.x == OBJECTS.GATE_YELLOW_H_OPEN || atlas.x == OBJECTS.GATE_YELLOW_V_OPEN:
							$Objects.set_cell(pos, 1, atlas + Vector2i.LEFT)
			elif object == OBJECTS.BUTTON_AQUA:
				for y in range(SEARCH_SIZE.y):
					for x in range(SEARCH_SIZE.x):
						var pos := Vector2i(x, y)
						var atlas : Vector2i = $Objects.get_cell_atlas_coords(pos)
						if atlas.x == OBJECTS.GATE_AQUA_H_CLOSED || atlas.x == OBJECTS.GATE_AQUA_V_CLOSED:
							$Objects.set_cell(pos, 1, atlas + Vector2i.RIGHT)
						elif atlas.x == OBJECTS.GATE_AQUA_H_OPEN || atlas.x == OBJECTS.GATE_AQUA_V_OPEN:
							$Objects.set_cell(pos, 1, atlas + Vector2i.LEFT)
	
	# Win condition
	var flags_left := false
	for flag in flags:
		flag.reached = false
		for obj in movables:
			if obj.pos == flag.pos && obj.color & flag.color:
				flag.reached = true
		if !flag.reached:
			flags_left = true
	
	if !flags_left && stars == 0:
		win_show()
	


# Converts grid coordinate to position vector
func coord2pos(coord: Vector2i) -> Vector2:
	return GRID_SIZE * (Vector2(coord) + Vector2.ONE / 2)

# Converts position vector to grid position. Used to fetch starting positions of movables
func pos2coord(pos: Vector2) -> Vector2i:
	return Vector2i(floor(pos / GRID_SIZE))

# Checks for a wall collision
func can_move(coord: Vector2i, color: COLOR) -> bool:
	if $Walls.get_cell_atlas_coords(coord).y < 4:
		# wall
		return false
	elif $Walls.get_cell_atlas_coords(coord).y < 8:
		# red wall
		if color & COLOR.RED:
			return false
	elif $Walls.get_cell_atlas_coords(coord).y < 12:
		# blue wall
		if color & COLOR.BLUE:
			return false
	# check for gates
	var obj = check_object(coord, color)
	if obj == OBJECTS.GATE_GREEN_H_CLOSED || obj == OBJECTS.GATE_GREEN_V_CLOSED || obj == OBJECTS.GATE_YELLOW_H_CLOSED || obj == OBJECTS.GATE_YELLOW_V_CLOSED || obj == OBJECTS.GATE_AQUA_H_CLOSED || obj == OBJECTS.GATE_AQUA_V_CLOSED:
		return false
	return true

# Checks for an object that is the same color
func check_object(coord: Vector2i, color: COLOR) -> OBJECTS:
	var atlas : Vector2i = $Objects.get_cell_atlas_coords(coord)
	if atlas.y == 1 && !(color & COLOR.BLUE) || atlas.y == 2 && !(color & COLOR.RED):
		# non matching color
		return OBJECTS.EMPTY
	else:
		return atlas.x as OBJECTS # should correspond to OBJECTS

# Destroys an object of that color
func destroy_object(coord: Vector2i, color: COLOR) -> void:
	var atlas : Vector2i = $Objects.get_cell_atlas_coords(coord)
	if atlas.y == 0 && color != COLOR.GRAY:
		# Purple object. Destroy corresponding component.
		if color == COLOR.RED:
			# Spawn a blue object
			$Objects.set_cell(coord, 1, Vector2i(atlas.x, 1))
		elif color == COLOR.BLUE:
			# Spawn a red object
			$Objects.set_cell(coord, 1, Vector2i(atlas.x, 2))
		else:
			# What is this
			$Objects.set_cell(coord)
			print(\"Error in destroy_object()\")
		
	else:
		$Objects.set_cell(coord)

func win_show() -> void:
	win = true
	win_label.show()

func defeat_show(obj) -> void:
	defeat = true
	defeat_label.show()
	obj.node.hide()

func defeat_hide() -> void:
	defeat = false
	defeat_label.hide()
	for obj in movables:
		obj.node.show()

# Dumps debug information
func returnPos() -> void:
	return
	@warning_ignore(\"unreachable_code\")
	for obj in movables:
		var type = \"UNKNOWN\"
		if obj.type == MOVABLES.PLAYER:
			type = \"PLAYER\"
		elif obj.type == MOVABLES.PUSH:
			type = \"PUSH\"
		
		var color = \"UNKNOWN\"
		if obj.color == COLOR.BLUE:
			color = \"BLUE\"
		elif obj.color == COLOR.RED:
			color = \"RED\"
		elif obj.color == COLOR.GRAY:
			color = \"GRAY\"
		
		print(type + \" \" + color + \" | \" + str(obj.moves))
	print()
"

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_2kmss"]
texture = ExtResource("2_fmjcu")
0:0/0 = 0
0:0/0/terrain_set = 0
0:0/0/terrain = 0
0:0/0/terrains_peering_bit/right_side = 0
0:0/0/terrains_peering_bit/bottom_side = 0
1:0/0 = 0
1:0/0/terrain_set = 0
1:0/0/terrain = 0
1:0/0/terrains_peering_bit/right_side = 0
1:0/0/terrains_peering_bit/bottom_side = 0
1:0/0/terrains_peering_bit/left_side = 0
2:0/0 = 0
2:0/0/terrain_set = 0
2:0/0/terrain = 0
2:0/0/terrains_peering_bit/bottom_side = 0
2:0/0/terrains_peering_bit/left_side = 0
3:0/0 = 0
3:0/0/terrain_set = 0
3:0/0/terrain = 0
3:0/0/terrains_peering_bit/bottom_side = 0
0:1/0 = 0
0:1/0/terrain_set = 0
0:1/0/terrain = 0
0:1/0/terrains_peering_bit/right_side = 0
0:1/0/terrains_peering_bit/bottom_side = 0
0:1/0/terrains_peering_bit/top_side = 0
1:1/0 = 0
1:1/0/terrain_set = 0
1:1/0/terrain = 0
1:1/0/terrains_peering_bit/right_side = 0
1:1/0/terrains_peering_bit/bottom_side = 0
1:1/0/terrains_peering_bit/left_side = 0
1:1/0/terrains_peering_bit/top_side = 0
2:1/0 = 0
2:1/0/terrain_set = 0
2:1/0/terrain = 0
2:1/0/terrains_peering_bit/bottom_side = 0
2:1/0/terrains_peering_bit/left_side = 0
2:1/0/terrains_peering_bit/top_side = 0
3:1/0 = 0
3:1/0/terrain_set = 0
3:1/0/terrain = 0
3:1/0/terrains_peering_bit/bottom_side = 0
3:1/0/terrains_peering_bit/top_side = 0
0:2/0 = 0
0:2/0/terrain_set = 0
0:2/0/terrain = 0
0:2/0/terrains_peering_bit/right_side = 0
0:2/0/terrains_peering_bit/top_side = 0
1:2/0 = 0
1:2/0/terrain_set = 0
1:2/0/terrain = 0
1:2/0/terrains_peering_bit/right_side = 0
1:2/0/terrains_peering_bit/left_side = 0
1:2/0/terrains_peering_bit/top_side = 0
2:2/0 = 0
2:2/0/terrain_set = 0
2:2/0/terrain = 0
2:2/0/terrains_peering_bit/left_side = 0
2:2/0/terrains_peering_bit/top_side = 0
3:2/0 = 0
3:2/0/terrain_set = 0
3:2/0/terrain = 0
3:2/0/terrains_peering_bit/top_side = 0
0:3/0 = 0
0:3/0/terrain_set = 0
0:3/0/terrain = 0
0:3/0/terrains_peering_bit/right_side = 0
1:3/0 = 0
1:3/0/terrain_set = 0
1:3/0/terrain = 0
1:3/0/terrains_peering_bit/right_side = 0
1:3/0/terrains_peering_bit/left_side = 0
2:3/0 = 0
2:3/0/terrain_set = 0
2:3/0/terrain = 0
2:3/0/terrains_peering_bit/left_side = 0
3:3/0 = 0
3:3/0/terrain_set = 0
3:3/0/terrain = 0
0:4/0 = 0
0:4/0/terrain_set = 0
0:4/0/terrain = 1
0:4/0/terrains_peering_bit/right_side = 1
0:4/0/terrains_peering_bit/bottom_side = 1
1:4/0 = 0
1:4/0/terrain_set = 0
1:4/0/terrain = 1
1:4/0/terrains_peering_bit/right_side = 1
1:4/0/terrains_peering_bit/bottom_side = 1
1:4/0/terrains_peering_bit/left_side = 1
2:4/0 = 0
2:4/0/terrain_set = 0
2:4/0/terrain = 1
2:4/0/terrains_peering_bit/bottom_side = 1
2:4/0/terrains_peering_bit/left_side = 1
3:4/0 = 0
3:4/0/terrain_set = 0
3:4/0/terrain = 1
3:4/0/terrains_peering_bit/bottom_side = 1
0:5/0 = 0
0:5/0/terrain_set = 0
0:5/0/terrain = 1
0:5/0/terrains_peering_bit/right_side = 1
0:5/0/terrains_peering_bit/bottom_side = 1
0:5/0/terrains_peering_bit/top_side = 1
1:5/0 = 0
1:5/0/terrain_set = 0
1:5/0/terrain = 1
1:5/0/terrains_peering_bit/right_side = 1
1:5/0/terrains_peering_bit/bottom_side = 1
1:5/0/terrains_peering_bit/left_side = 1
1:5/0/terrains_peering_bit/top_side = 1
2:5/0 = 0
2:5/0/terrain_set = 0
2:5/0/terrain = 1
2:5/0/terrains_peering_bit/bottom_side = 1
2:5/0/terrains_peering_bit/left_side = 1
2:5/0/terrains_peering_bit/top_side = 1
3:5/0 = 0
3:5/0/terrain_set = 0
3:5/0/terrain = 1
3:5/0/terrains_peering_bit/bottom_side = 1
3:5/0/terrains_peering_bit/top_side = 1
0:6/0 = 0
0:6/0/terrain_set = 0
0:6/0/terrain = 1
0:6/0/terrains_peering_bit/right_side = 1
0:6/0/terrains_peering_bit/top_side = 1
1:6/0 = 0
1:6/0/terrain_set = 0
1:6/0/terrain = 1
1:6/0/terrains_peering_bit/right_side = 1
1:6/0/terrains_peering_bit/left_side = 1
1:6/0/terrains_peering_bit/top_side = 1
2:6/0 = 0
2:6/0/terrain_set = 0
2:6/0/terrain = 1
2:6/0/terrains_peering_bit/left_side = 1
2:6/0/terrains_peering_bit/top_side = 1
3:6/0 = 0
3:6/0/terrain_set = 0
3:6/0/terrain = 1
3:6/0/terrains_peering_bit/top_side = 1
0:7/0 = 0
0:7/0/terrain_set = 0
0:7/0/terrain = 1
0:7/0/terrains_peering_bit/right_side = 1
1:7/0 = 0
1:7/0/terrain_set = 0
1:7/0/terrain = 1
1:7/0/terrains_peering_bit/right_side = 1
1:7/0/terrains_peering_bit/left_side = 1
2:7/0 = 0
2:7/0/terrain_set = 0
2:7/0/terrain = 1
2:7/0/terrains_peering_bit/left_side = 1
3:7/0 = 0
3:7/0/terrain_set = 0
3:7/0/terrain = 1
0:8/0 = 0
0:8/0/terrain_set = 0
0:8/0/terrain = 2
0:8/0/terrains_peering_bit/right_side = 2
0:8/0/terrains_peering_bit/bottom_side = 2
1:8/0 = 0
1:8/0/terrain_set = 0
1:8/0/terrain = 2
1:8/0/terrains_peering_bit/right_side = 2
1:8/0/terrains_peering_bit/bottom_side = 2
1:8/0/terrains_peering_bit/left_side = 2
2:8/0 = 0
2:8/0/terrain_set = 0
2:8/0/terrain = 2
2:8/0/terrains_peering_bit/bottom_side = 2
2:8/0/terrains_peering_bit/left_side = 2
3:8/0 = 0
3:8/0/terrain_set = 0
3:8/0/terrain = 2
3:8/0/terrains_peering_bit/bottom_side = 2
0:9/0 = 0
0:9/0/terrain_set = 0
0:9/0/terrain = 2
0:9/0/terrains_peering_bit/right_side = 2
0:9/0/terrains_peering_bit/bottom_side = 2
0:9/0/terrains_peering_bit/top_side = 2
1:9/0 = 0
1:9/0/terrain_set = 0
1:9/0/terrain = 2
1:9/0/terrains_peering_bit/right_side = 2
1:9/0/terrains_peering_bit/bottom_side = 2
1:9/0/terrains_peering_bit/left_side = 2
1:9/0/terrains_peering_bit/top_side = 2
2:9/0 = 0
2:9/0/terrain_set = 0
2:9/0/terrain = 2
2:9/0/terrains_peering_bit/bottom_side = 2
2:9/0/terrains_peering_bit/left_side = 2
2:9/0/terrains_peering_bit/top_side = 2
3:9/0 = 0
3:9/0/terrain_set = 0
3:9/0/terrain = 2
3:9/0/terrains_peering_bit/bottom_side = 2
3:9/0/terrains_peering_bit/top_side = 2
0:10/0 = 0
0:10/0/terrain_set = 0
0:10/0/terrain = 2
0:10/0/terrains_peering_bit/right_side = 2
0:10/0/terrains_peering_bit/top_side = 2
1:10/0 = 0
1:10/0/terrain_set = 0
1:10/0/terrain = 2
1:10/0/terrains_peering_bit/right_side = 2
1:10/0/terrains_peering_bit/left_side = 2
1:10/0/terrains_peering_bit/top_side = 2
2:10/0 = 0
2:10/0/terrain_set = 0
2:10/0/terrain = 2
2:10/0/terrains_peering_bit/left_side = 2
2:10/0/terrains_peering_bit/top_side = 2
3:10/0 = 0
3:10/0/terrain_set = 0
3:10/0/terrain = 2
3:10/0/terrains_peering_bit/top_side = 2
0:11/0 = 0
0:11/0/terrain_set = 0
0:11/0/terrain = 2
0:11/0/terrains_peering_bit/right_side = 2
1:11/0 = 0
1:11/0/terrain_set = 0
1:11/0/terrain = 2
1:11/0/terrains_peering_bit/right_side = 2
1:11/0/terrains_peering_bit/left_side = 2
2:11/0 = 0
2:11/0/terrain_set = 0
2:11/0/terrain = 2
2:11/0/terrains_peering_bit/left_side = 2
3:11/0 = 0
3:11/0/terrain_set = 0
3:11/0/terrain = 2
0:12/0 = 0
1:12/0 = 0
2:12/0 = 0

[sub_resource type="TileSet" id="TileSet_3pr21"]
terrain_set_0/mode = 2
terrain_set_0/terrain_0/name = "Black Wall"
terrain_set_0/terrain_0/color = Color(0.668035, 0.693183, 0.718002, 1)
terrain_set_0/terrain_1/name = "Red Wall"
terrain_set_0/terrain_1/color = Color(0.114664, 0.5342, 5.77569e-07, 1)
terrain_set_0/terrain_2/name = "Blue Wall"
terrain_set_0/terrain_2/color = Color(0.578879, 0.460658, 0, 1)
sources/2 = SubResource("TileSetAtlasSource_2kmss")

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_56jwq"]
texture = ExtResource("3_fdq0e")
texture_region_size = Vector2i(32, 32)
0:0/0 = 0
1:0/0 = 0
3:0/0 = 0
4:0/0 = 0
5:0/0 = 0
0:1/0 = 0
1:1/0 = 0
2:1/0 = 0
3:1/0 = 0
4:1/0 = 0
5:1/0 = 0
6:1/next_alternative_id = 5
6:1/0 = 0
7:1/0 = 0
8:1/0 = 0
9:1/0 = 0
10:1/0 = 0
11:1/0 = 0
12:1/0 = 0
13:1/0 = 0
14:1/0 = 0
15:1/0 = 0
16:1/0 = 0
17:1/0 = 0
18:1/0 = 0
19:1/0 = 0
20:1/0 = 0
21:1/0 = 0
0:2/0 = 0
1:2/0 = 0
2:2/0 = 0
3:2/0 = 0
4:2/0 = 0
5:2/0 = 0
6:2/0 = 0
7:2/0 = 0
8:2/0 = 0
9:2/0 = 0
10:2/0 = 0
11:2/0 = 0
12:2/0 = 0
13:2/0 = 0
14:2/0 = 0
15:2/0 = 0
16:2/0 = 0
17:2/0 = 0
18:2/0 = 0
19:2/0 = 0
20:2/0 = 0
21:2/0 = 0
0:3/0 = 0
1:3/0 = 0
2:3/0 = 0
3:3/0 = 0
4:3/0 = 0
5:3/0 = 0
6:3/0 = 0
7:3/0 = 0
8:3/0 = 0
9:3/0 = 0
10:3/0 = 0
11:3/0 = 0
12:3/0 = 0
13:3/0 = 0
14:3/0 = 0
15:3/0 = 0
16:3/0 = 0
17:3/0 = 0
18:3/0 = 0
19:3/0 = 0
20:3/0 = 0
21:3/0 = 0

[sub_resource type="TileSet" id="TileSet_7wl2r"]
tile_size = Vector2i(32, 32)
sources/1 = SubResource("TileSetAtlasSource_56jwq")

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_f8lb6"]
load_path = "res://.godot/imported/red.png-92224c10c258f02984efc03eb2d4d120.ctex"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ci8nm"]
shader = ExtResource("5_jd17v")
shader_parameter/offset = Vector2(-1000, -1000)
shader_parameter/texture2 = SubResource("CompressedTexture2D_f8lb6")

[node name="Game" type="Node"]
script = SubResource("GDScript_8rc57")

[node name="Walls" type="TileMapLayer" parent="."]
texture_filter = 1
scale = Vector2(4, 4)
tile_map_data = PackedByteArray("AAAAAAAAAgAAAAAAAAAAAAEAAgAAAAEAAAAAAAIAAgAAAAEAAAAAAAMAAgAAAAEAAAAAAAQAAgAAAAEAAAAAAAUAAgAAAAEAAAAAAAYAAgAAAAEAAAAAAAcAAgAAAAEAAAAAAAgAAgAAAAEAAAAAAAkAAgAAAAIAAAABAAkAAgABAAIAAAACAAkAAgABAAIAAAADAAkAAgABAAIAAAAEAAkAAgABAAIAAAAFAAkAAgABAAIAAAAGAAkAAgABAAIAAAAHAAkAAgABAAIAAAAIAAkAAgABAAIAAAAJAAkAAgABAAIAAAAKAAkAAgABAAIAAAALAAkAAgABAAIAAAAMAAkAAgABAAIAAAANAAkAAgABAAIAAAAOAAkAAgABAAIAAAAPAAkAAgABAAIAAAAQAAkAAgABAAIAAAARAAkAAgACAAIAAAARAAgAAgACAAEAAAARAAcAAgACAAEAAAARAAYAAgACAAEAAAARAAUAAgACAAEAAAARAAQAAgACAAEAAAARAAMAAgACAAEAAAARAAIAAgACAAEAAAARAAEAAgACAAEAAAARAAAAAgACAAEAAAAQAAAAAgABAAAAAAAPAAAAAgABAAAAAAAOAAAAAgABAAAAAAANAAAAAgABAAAAAAAMAAAAAgABAAAAAAALAAAAAgABAAAAAAAKAAAAAgABAAAAAAAJAAAAAgABAAAAAAAIAAAAAgABAAAAAAAHAAAAAgABAAAAAAAGAAAAAgABAAAAAAAFAAAAAgABAAAAAAAEAAAAAgABAAAAAAADAAAAAgABAAAAAAACAAAAAgABAAAAAAABAAAAAgABAAAAAAABAAIAAgACAAEAAAAFAAIAAgADAAcAAAAGAAIAAgAAAAwAAAAJAAIAAgAAAAwAAAAKAAIAAgAAAAwAAAAMAAIAAgAAAAwAAAANAAIAAgAAAAwAAAAOAAIAAgAAAAwAAAAPAAIAAgAAAAwAAAAPAAMAAgABAAAAAAAPAAQAAgABAAEAAAAPAAUAAgABAAEAAAAPAAYAAgABAAIAAAAPAAcAAgAAAAwAAAAOAAcAAgAAAAwAAAANAAcAAgAAAAwAAAALAAQAAgABAAEAAAAMAAQAAgABAAEAAAANAAQAAgABAAEAAAANAAYAAgABAAIAAAAHAAIAAgAAAAwAAAAKAAQAAgABAAEAAAAJAAQAAgAAAAEAAAAJAAUAAgAAAAwAAAAJAAYAAgAAAAIAAAAJAAcAAgAAAAwAAAALAAYAAgABAAIAAAALAAcAAgADAAcAAAALAAgAAgABAAAAAAAGAAQAAgABAAEAAAAFAAQAAgABAAEAAAAEAAQAAgABAAEAAAACAAQAAgAAAAwAAAADAAcAAgAAAAwAAAAEAAcAAgAAAAwAAAAFAAcAAgADAAgAAAAGAAcAAgAAAAwAAAAGAAUAAgABAAEAAAAGAAYAAgABAAIAAAAKAAcAAgAAAAwAAAAMAAcAAgAAAAwAAAABAAgAAgABAAEAAAABAAcAAgACAAEAAAABAAYAAgACAAEAAAABAAUAAgACAAEAAAABAAQAAgACAAEAAAABAAMAAgACAAEAAAACAAMAAgAAAAwAAAAFAAMAAgABAAAAAAAGAAMAAgABAAAAAAAHAAMAAgACAAAAAAAIAAMAAgAAAAwAAAAJAAMAAgAAAAAAAAAKAAMAAgABAAAAAAALAAMAAgABAAAAAAAMAAMAAgABAAAAAAANAAMAAgABAAAAAAAOAAMAAgABAAAAAAAOAAQAAgABAAEAAAAOAAUAAgABAAEAAAAOAAYAAgABAAIAAAANAAUAAgABAAEAAAAMAAUAAgABAAEAAAAMAAYAAgABAAIAAAALAAUAAgABAAEAAAAKAAUAAgABAAEAAAAKAAYAAgABAAIAAAAJAAgAAgABAAAAAAAIAAgAAgABAAEAAAAHAAgAAgABAAAAAAAGAAgAAgABAAAAAAAFAAgAAgABAAAAAAAEAAgAAgABAAAAAAADAAgAAgABAAAAAAACAAgAAgABAAAAAAAKAAgAAgABAAAAAAAIAAcAAgAAAAwAAAAIAAYAAgAAAAwAAAAIAAUAAgAAAAwAAAAIAAQAAgAAAAwAAAAHAAQAAgACAAEAAAAHAAUAAgACAAEAAAAHAAYAAgACAAIAAAAHAAcAAgAAAAwAAAAFAAUAAgABAAEAAAAEAAUAAgABAAEAAAADAAYAAgAAAAIAAAAEAAYAAgABAAIAAAAFAAYAAgABAAIAAAAMAAgAAgABAAAAAAANAAgAAgABAAAAAAAOAAgAAgABAAAAAAAPAAgAAgABAAAAAAAQAAgAAgABAAEAAAAQAAcAAgAAAAEAAAAQAAYAAgABAAEAAAAQAAUAAgABAAEAAAAQAAQAAgABAAEAAAAQAAMAAgABAAEAAAAQAAIAAgAAAAEAAAAQAAEAAgABAAEAAAAPAAEAAgABAAIAAAAOAAEAAgABAAIAAAANAAEAAgABAAIAAAAMAAEAAgABAAIAAAALAAEAAgABAAIAAAAKAAEAAgABAAIAAAAJAAEAAgABAAIAAAAIAAEAAgABAAEAAAAHAAEAAgABAAIAAAAGAAEAAgABAAIAAAAFAAEAAgABAAIAAAAEAAEAAgABAAIAAAADAAEAAgABAAIAAAACAAEAAgABAAIAAAABAAEAAgABAAEAAAAIAAIAAgAAAAwAAAACAAcAAgAAAAwAAAACAAYAAgAAAAwAAAACAAUAAgAAAAwAAAADAAUAAgAAAAEAAAADAAQAAgAAAAEAAAADAAMAAgAAAAAAAAAEAAMAAgABAAAAAAAEAAIAAgAAAAwAAAADAAIAAgAAAAwAAAACAAIAAgAAAAwAAAALAAIAAgADAAsAAAA=")
tile_set = SubResource("TileSet_3pr21")

[node name="Objects" type="TileMapLayer" parent="."]
texture_filter = 1
scale = Vector2(2, 2)
tile_map_data = PackedByteArray("AAAPAAcAAQAAAAMAAAAPAAIAAQAAAAMAAAAJAAUAAQACAAMAAAAIAAQAAQAGAAIAAAAKAAIAAQADAAMAAAAHAAIAAQABAAAAAAAFAAIAAQASAAMAAAA=")
tile_set = SubResource("TileSet_7wl2r")

[node name="PlayerRed" type="Sprite2D" parent="."]
position = Vector2(160, 481)
scale = Vector2(0.45, 0.45)
texture = ExtResource("4_vbmrn")

[node name="PlayerBlue" type="Sprite2D" parent="."]
material = SubResource("ShaderMaterial_ci8nm")
position = Vector2(162, 160)
scale = Vector2(0.45, 0.45)
texture = ExtResource("6_prle1")

[node name="Win" type="Label" parent="."]
offset_left = 460.0
offset_top = 15.0
offset_right = 643.0
offset_bottom = 132.0
text = "Win
"
horizontal_alignment = 1
vertical_alignment = 1

[node name="Defeat" type="Label" parent="."]
offset_left = 460.0
offset_top = 14.0
offset_right = 643.0
offset_bottom = 131.0
text = "Defeat

"
horizontal_alignment = 1
vertical_alignment = 1
